

// Code Generated by Sidekick is for learning and experimentation purposes only
let ingredients = [];
let savedRecipes = [];
let previousRecipes = [];

document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('token');
    const currentPath = window.location.pathname;

    if (!token && currentPath !== '/login.html' && currentPath !== '/signup.html') {
        window.location.href = 'login.html';
    } else if (token && (currentPath === '/login.html' || currentPath === '/signup.html')) {
        window.location.href = 'index.html';
    }
});

async function signup() {
    const email = document.getElementById('signup-email').value;
    const password = document.getElementById('signup-password').value;

    const response = await fetch('http://127.0.0.1:8000/signup/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
    });

    if (response.ok) {
        alert('Signup successful! Please login.');
        window.location.href = 'login.html';
    } else {
        alert('Signup failed. Please try again.');
    }
}

async function login() {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    const response = await fetch('http://127.0.0.1:8000/login/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
    });

    if (response.ok) {
        const data = await response.json();
        localStorage.setItem('token', data.access_token);
        window.location.href = 'index.html';
    } else {
        alert('Login failed. Please try again.');
    }
}

function logout() {
    localStorage.removeItem('token');
    window.location.href = 'login.html';
}

function addIngredient() {
    const ingredientInput = document.getElementById('ingredient-input');
    const ingredient = ingredientInput.value.trim();
    if (ingredient) {
        ingredients.push(ingredient);
        displayIngredients();
        ingredientInput.value = '';
    }
}

function removeIngredient(index) {
    ingredients.splice(index, 1);
    displayIngredients();
}

function displayIngredients() {
    const ingredientsList = document.getElementById('ingredients-list');
    ingredientsList.innerHTML = '';
    ingredients.forEach((ingredient, index) => {
        const ingredientDiv = document.createElement('div');
        ingredientDiv.classList.add('ingredient');
        ingredientDiv.textContent = ingredient;

        const removeButton = document.createElement('button');
        removeButton.classList.add('remove');
        removeButton.textContent = 'x';
        removeButton.onclick = () => removeIngredient(index);

        ingredientDiv.appendChild(removeButton);
        ingredientsList.appendChild(ingredientDiv);
    });
}

async function findRecipes() {
    const ingredientsStr = ingredients.join(',');
    const token = localStorage.getItem('token');

    const response = await fetch(`http://127.0.0.1:8000/recipes/?ingredients=${ingredientsStr}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (response.ok) {
        const recipes = await response.json();
        displayRecipes(recipes);
        previousRecipes = recipes;
    } else {
        document.getElementById('recipes').innerHTML = 'No matching recipes found';
    }
}

function displayRecipes(recipes) {
    const recipesDiv = document.getElementById('recipes');
    recipesDiv.innerHTML = '';

    recipes.forEach(recipe => {
        const recipeDiv = document.createElement('div');
        recipeDiv.classList.add('recipe');
        recipeDiv.onclick = () => showRecipeDetails(recipe.id);

        const recipeName = document.createElement('h2');
        recipeName.textContent = recipe.title;

        const recipeImage = document.createElement('img');
        recipeImage.src = recipe.image;
        recipeImage.alt = recipe.title;

        const saveButton = document.createElement('button');
        saveButton.textContent = 'Save';
        saveButton.onclick = (e) => {
            e.stopPropagation();
            saveRecipe(recipe);
        };

        recipeDiv.appendChild(recipeName);
        recipeDiv.appendChild(recipeImage);
        recipeDiv.appendChild(saveButton);

        recipesDiv.appendChild(recipeDiv);
    });
}

async function showRecipeDetails(id) {
    const token = localStorage.getItem('token');

    const response = await fetch(`http://127.0.0.1:8000/recipe/${id}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (response.ok) {
        const recipe = await response.json();
        displayRecipeDetails(recipe);
    } else {
        alert('Error fetching recipe details');
    }
}

function displayRecipeDetails(recipe) {
    const modal = document.getElementById('recipe-details');
    const modalContent = document.getElementById('recipe-details-content');
    modalContent.innerHTML = `
        <h2>${recipe.title}</h2>
        <img src="${recipe.image}" alt="${recipe.title}">
        <p>${recipe.instructions}</p>
    `;
    modal.style.display = 'block';
}

function closeModal() {
    const modal = document.getElementById('recipe-details');
    modal.style.display = 'none';
}

async function saveRecipe(recipe) {
    const token = localStorage.getItem('token');

    const response = await fetch('http://127.0.0.1:8000/recipes/save/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(recipe)
    });

    if (response.ok) {
        alert('Recipe saved!');
    } else {
        alert('Error saving recipe');
    }
}

async function displaySavedRecipes() {
    const token = localStorage.getItem('token');

    const response = await fetch('http://127.0.0.1:8000/recipes/saved/', {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (response.ok) {
        const recipes = await response.json();
        const savedRecipesDiv = document.getElementById('saved-recipes');
        savedRecipesDiv.innerHTML = '';

        recipes.forEach((recipe, index) => {
            const recipeDiv = document.createElement('div');
            recipeDiv.classList.add('saved-recipe');
            recipeDiv.onclick = () => showRecipeDetails(recipe.id);

            const recipeName = document.createElement('h2');
            recipeName.textContent = recipe.title;

            const recipeImage = document.createElement('img');
            recipeImage.src = recipe.image;
            recipeImage.alt = recipe.title;

            const deleteButton = document.createElement('button');
            deleteButton.textContent = 'Delete';
            deleteButton.onclick = (e) => {
                e.stopPropagation();
                deleteSavedRecipe(recipe.id);
            };

            recipeDiv.appendChild(recipeName);
            recipeDiv.appendChild(recipeImage);
            recipeDiv.appendChild(deleteButton);

            savedRecipesDiv.appendChild(recipeDiv);
        });
    } else {
        alert('Error fetching saved recipes');
    }
}

async function deleteSavedRecipe(recipeId) {
    const token = localStorage.getItem('token');

    const response = await fetch(`http://127.0.0.1:8000/recipes/saved/${recipeId}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (response.ok) {
        displaySavedRecipes();
    } else {
        alert('Error deleting recipe');
    }
}

// Call displaySavedRecipes if on the My Save page
if (document.getElementById('saved-recipes')) {
    displaySavedRecipes();
}

// Display previous search results if available
if (document.getElementById('recipes') && previousRecipes.length > 0) {
    displayRecipes(previousRecipes);
}

// Display previously added ingredients if available
if (ingredients.length > 0) {
    displayIngredients();
}













